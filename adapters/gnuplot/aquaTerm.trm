/* -*- objc -*-
 * $Id: aquaTerm.trm,v 1.5 2001/12/10 16:09:00 persquare Exp $
 *
 */

/* GNUPLOT - aquaTerm.trm */


/*
 * This file is included by ../term.c via ../term.h.
 *
 * This terminal driver supports:
 *     Aqua (Mac OS X/Cocoa)
 *
 * AUTHORS
 *  Per Persson from openstep.trm by Robert Lutwak
 * 
 * send your comments or suggestions to (info-gnuplot@dartmouth.edu).
 *
 * This terminal attempts to connect, via the MacOS X Distributed
 * Objects system, to the "aquatermServer."  If there is no such
 * service registered with the OS, the terminal attempts to fire
 * up AquaTerm.app.  If the user has not set the environment variable
 * GNUTERMAPP, the terminal searches for AquaTerm.app in standard 
 * locations like /Applications, ~/Applications, etc.
 * In order to use this filter, you MUST have AquaTerm.app or some other
 * application capable of handling the AQTProtocol installed
 * on your system.
 *
 * Once connected to the server, all gnuplot primitives are sent, 
 * via the D.O. system, to AquaTerm.app, which produces renders graphs, 
 * manages the windows, takes care of printing etc.
 * 
 *
 * Defaults are
 * n=0
 *
 * to choose window n
 * 'set term aqua <n>"
 *
 */

#include "driver.h"

#ifdef TERM_REGISTER
register_term(aqua)
#endif

#ifdef TERM_PROTO
/*
 * 2001-08-18 PP
 * src/tables.h defines S_OUTPUT which is also defined in
 * /System/Library/Frameworks/CoreServices.framework/Frameworks/OT.framework/Headers/OpenTransportProtocol.h:736: 
 * included from Foundation/NSFoundation.h
 * => conflicting types for `S_OUTPUT'
 * Avoid conflict by selecting only needed headers
 */ 
#import <Foundation/NSConnection.h>
#import <Foundation/NSDistantObject.h>
#import <Foundation/NSDictionary.h>
#import <Foundation/NSAutoreleasePool.h>
#import <Foundation/NSPortCoder.h>
#import <Foundation/NSNotification.h>
#import <Foundation/NSException.h>
#import <AppKit/NSWorkspace.h>
#import <AppKit/NSBezierPath.h>
#import <stdarg.h>

/* Debugging extras */
static inline void NOOP_(id x, ...) {;}

#ifdef LOGGING
#define LOG  NSLog
#else
#define LOG  NOOP_
#endif

/* Required entries */
TERM_PUBLIC void AQUA_options __PROTO((void));
TERM_PUBLIC void AQUA_init __PROTO((void));
TERM_PUBLIC void AQUA_reset __PROTO((void));
TERM_PUBLIC void AQUA_text __PROTO((void));
TERM_PUBLIC void AQUA_graphics __PROTO((void));
TERM_PUBLIC void AQUA_move __PROTO((unsigned int x, unsigned int y));
TERM_PUBLIC void AQUA_vector __PROTO((unsigned int x, unsigned int y));
TERM_PUBLIC void AQUA_linetype __PROTO((int linetype));
TERM_PUBLIC void AQUA_put_text __PROTO((unsigned int x, unsigned int y,const char *str));

/* Optional entries */
TERM_PUBLIC int AQUA_text_angle __PROTO((int));
TERM_PUBLIC int AQUA_justify_text __PROTO((enum JUSTIFY));
TERM_PUBLIC int AQUA_set_font __PROTO((const char *font));  /* "font,size" */
TERM_PUBLIC void AQUA_set_pointsize __PROTO((double size)); /* notification of set pointsize */
TERM_PUBLIC int flags; /* various flags */
TERM_PUBLIC void AQUA_suspend __PROTO((void)); /* after one plot of multiplot */
TERM_PUBLIC void AQUA_resume __PROTO((void));  /* before subsequent plot of multiplot */
TERM_PUBLIC void AQUA_boxfill __PROTO((int style, unsigned int x1, unsigned int y1, unsigned int width, unsigned int height)); /* clear part of multiplot */
TERM_PUBLIC void AQUA_linewidth __PROTO((double linewidth));
TERM_PUBLIC void AQUA_pointsize __PROTO((double pointsize));
#ifdef PM3D
  TERM_PUBLIC int AQUA_make_palette __PROTO((t_sm_palette *palette));
  TERM_PUBLIC void AQUA_set_color __PROTO((double gray));
  TERM_PUBLIC void AQUA_filled_polygon __PROTO((int points, gpiPoint *corners));
#endif
/* End of entries */


#define AQUA_XMAX (11.69*72)  /* = 842, paper width times screen resolution */
#define AQUA_YMAX (8.26*72)   /* = 595, paper height times screen resolution */
#define AQUA_VTIC 8     
#define AQUA_HTIC 8
#define AQUA_VCHAR 16     /* default font is Times at 16 points */
#define AQUA_HCHAR (AQUA_VCHAR*6/10)

/*
 * The class NSBezierPath doesn't implement replacementObjectForPortCoder so 
 * we add that behaviour as a category for NSBezierPath
 */
@interface NSBezierPath (NSBezierPathDOCategory)
- (id)replacementObjectForPortCoder:(NSPortCoder *)portCoder; 
@end

/*
 * This defines the methods implemented by the server
 *
 */
@protocol AQTProtocol
//
// Returns key/value coded objects such as a version
// number string for AquaTerm in the form #.#.#
// Parameters like AQUA_XMAX should also be passed here
//
- (bycopy NSDictionary *) getAquaTermInfo;
//
// Render the current model, argument is normally YES unless
// this is part of a multiplot operation with subsequent 
// drawing to the same model
//
- (oneway void) renderInViewShouldRelease:(BOOL)release;
- (oneway void) clearRect:(NSRect)rect;
//
// Add a string to the current model, where:
// justification is {LEFT=0, CENTER, RIGHT}
// colorIndex is a number in the range -3 and upwards
// The colors -3, -2, -1 have special meaning and 
// colors 0 and upwards are taken modulo N (i.e cyclic)
//
- (oneway void) addString:(bycopy NSString *)text 
                  atPoint:(bycopy NSPoint)point 
        withJustification:(bycopy int)justification 
                  atAngle:(bycopy float)angle
         withIndexedColor:(bycopy int)colorIndex;
//
// Set the font for the subsequent strings added to the model
// (mimics fontWithName: size: method in NSFont)
//          
- (oneway void) setFontWithName:(bycopy NSString *)fontName size:(bycopy float)fontSize;
//
// Add graphic elements to the model. A "polyline" refers to any 
// collection of line segments etc. whereas "polygon" refers to a 
// closed surface. (Q: confusing naming scheme?)
// IndexedColor has the same meaning as for addString and
// color is number between 0 and 1 corresponding to an interpolation
// between two colors. 
//
- (oneway void) addPolyline:(bycopy NSBezierPath *)aPath withIndexedColor:(bycopy int)colorIndex;
- (oneway void) addPolyline:(bycopy NSBezierPath *)aPath withColor:(bycopy float)color;
- (oneway void) addPolygon:(bycopy NSBezierPath *)aPath withIndexedColor:(bycopy int)colorIndex;
- (oneway void) addPolygon:(bycopy NSBezierPath *)aPath withColor:(bycopy float)color;
//
// Select the model that will receive subsequent graphic elements
// (Q: What does this imply for the corresponding window? Front? Show? Key?
//  A: Definitely "show" and absolutely _not_ "front", "key" is meaningless)
// 
- (oneway void) selectModel:(int) currentModel;
@end

#define GOT_AQUA_PROTO
#endif

#ifndef TERM_PROTO_ONLY

#ifdef TERM_BODY

static NSAutoreleasePool *arpool;   // our autorelease pool 
static id gnuTermAccess;        		// local (and private) object manages the D.O. connection
static int currentWindow = 0;				// the only option to set
// FIXME: stuff below goes into gnuTermAccess object
static NSBezierPath *thePath;
static int currentJustificationMode;
static int currentLinetype;
static double currentGray; 
static float currentAngle;

@implementation NSBezierPath (NSBezierPathDOCategory)
- (id)replacementObjectForPortCoder:(NSPortCoder *)portCoder 
{
  if ([portCoder isBycopy]) 
    return self;
  return [super replacementObjectForPortCoder:portCoder];
}
@end

//
// Private Obj-C class GnuTermDriver
//
@interface GnuTermDriver:NSObject 
{
  @private
  NSDistantObject *server;
}
-(id)init;
-(void)dealloc;
-(id)server;
-(void)invalidateServer;
-(BOOL)connectToServer;
-(void) flushOrphanedGraphicsRender:(BOOL)shouldRender release:(BOOL)shouldRelease;
@end

@implementation GnuTermDriver
- (id)init
{
	self = [super init];
	if ([self connectToServer])
	{
		[server setProtocolForProxy:@protocol(AQTProtocol)];
	}
  return self;
}

-(void)dealloc
{
  [server release];
  [super dealloc];
}

-(void)invalidateServer
{
	[server release];
	server = nil;
	currentWindow = 0;
	printf("Lost connection to server,\nuse \"set term aqua <n>\" to reconnect.");
}

-(BOOL)connectToServer
{
  BOOL defaultApp = YES;
  BOOL didConnect = NO;
  NSString *appString;
  /*
   * Establish a connection to graphics terminal (server)
   * First check if a  server is registered already
   * If not, check if environment variable GNUTERMAPP is set
   * and try to launch that application
   * Finally default to looking for a hardcoded app in 
   * standard locations.
   */
  server = [NSConnection rootProxyForConnectionWithRegisteredName:@"aquatermServer" host:nil];
  if (server) /* Server is running ready to go */
  {   
    [server retain];
    didConnect = YES;
  }
  else /* Server isn't running, we must fire it up */
  {
    if (getenv("GNUTERMAPP") == (char *)NULL)
    {
      appString = [NSString stringWithString:@"AquaTerm"];
    }
    else
    {
      appString = [NSString stringWithCString:getenv("GNUTERMAPP")];
      defaultApp = NO;
    }
    /* Try to launch application */
    if ([[NSWorkspace sharedWorkspace] launchApplication:appString] == NO) 
    {
      printf("Failed to launch gnuplot server.\n");
      if (defaultApp)
      {
        printf("You must either put the server application in \n");
        printf("the /Applications folder, ~/Applications folder\n");
        printf("or set the environment variable GNUTERMAPP to the\n");
        printf("full path of the server application, e.g.\n");
        printf("setenv GNUTERMAPP \"/some/strange/location/MyServer.app\"\n");
      }
      else
      {
        printf("Check environment variable GNUTERMAPP for errors\n");
      }
    }
    else 
    {
      do { /* Wait for it to register Server methods with OS */
        server =[NSConnection rootProxyForConnectionWithRegisteredName:@"aquatermServer" host:nil];
      } while (!server);  /* This could result in a hang... */
      [server retain];
      didConnect = YES;
   	}
  }
  return didConnect;
}

-(NSDistantObject *)server
{
  return server;
}
-(void) flushOrphanedGraphicsRender:(BOOL)shouldRender release:(BOOL)shouldRelease
{
	NS_DURING
		if ([thePath isEmpty] == NO)
		{
			[[gnuTermAccess server] addPolyline:thePath withIndexedColor:currentLinetype];    
			[thePath removeAllPoints];                   
		}
        if (shouldRender)
        {	
          [[gnuTermAccess server] renderInViewShouldRelease:shouldRelease];
        }
	NS_HANDLER
		if ([[localException name] isEqualToString:@"NSInvalidSendPortException"]) 
			[gnuTermAccess invalidateServer];
		else
			[localException raise];
	NS_ENDHANDLER  
}
@end


enum AQUA_id {
  AQUA_DEFAULT,
  AQUA_OTHER
};


static struct gen_table AQUA_opts[] =
{
  { "d$efault", AQUA_DEFAULT },
  { NULL, AQUA_OTHER }
};

   /**"
   *** AQUA_options is called 0 or more times before a call to AQUA_init occurs.
   *** It is important that the option <n> is passed correctly to GNUTERMAPP
   "**/
TERM_PUBLIC void
AQUA_options()
{
  struct value a;

  LOG(@"AQUA_options");
  while (!END_OF_COMMAND) 
  {
    switch(lookup_table(&AQUA_opts[0],c_token)) 
    {
     case AQUA_DEFAULT:
      currentWindow = 0;
      c_token++;
      break;
     case AQUA_OTHER:
      currentWindow = (int) real(const_express(&a));
      break;  
    default:      
      break;
    }
  }
}


TERM_PUBLIC void
AQUA_init()
{
	NSDictionary *termInfo;
  LOG(@"Aqua Init");
  if (arpool == NULL)   /* Make sure we don't leak mem by allocating every time */
  {
    arpool = [[NSAutoreleasePool alloc] init]; 
    gnuTermAccess = [[GnuTermDriver alloc] init]; 
    thePath = [[NSBezierPath alloc] init];
    currentJustificationMode = 0;
    currentLinetype = 0;
    currentGray = 0.0;
    currentAngle = 0.0;
  }
  if (![gnuTermAccess server])	/* server could be invalid (=nil) for several reasons */
  {
  	if ([gnuTermAccess connectToServer])
  	{
  		[[gnuTermAccess server] setProtocolForProxy:@protocol(AQTProtocol)];
		}
  }
  NS_DURING	/* try */
		if ([[gnuTermAccess server] respondsToSelector:@selector(getAquaTermInfo)]) /* test protocol */ 
		{
			// protocol version > 0.1.0
			termInfo = [[gnuTermAccess server] getAquaTermInfo];
			term->xmax =[[termInfo objectForKey:@"AQTXMax"] unsignedIntValue]; 
			term->ymax =[[termInfo objectForKey:@"AQTYMax"] unsignedIntValue]; 
		}
		else
		{
			// protocol version = 0.1.0
			term->xmax = AQUA_XMAX;
			term->ymax = AQUA_YMAX;
			NSLog(@"Warning - the graphics server is old, please update it!");
		}
		[[gnuTermAccess server]  selectModel:currentWindow];
	NS_HANDLER 
		if ([[localException name] isEqualToString:@"NSInvalidSendPortException"]) 
			[gnuTermAccess invalidateServer];
		else
			[localException raise];
	NS_ENDHANDLER
}

TERM_PUBLIC void
AQUA_reset()
{
}


TERM_PUBLIC void
AQUA_text()
{
    [gnuTermAccess flushOrphanedGraphicsRender:YES release:YES];
}


TERM_PUBLIC void
AQUA_graphics()
{
}

TERM_PUBLIC void
AQUA_move(unsigned int x, unsigned int y)
{
  [thePath moveToPoint:NSMakePoint(x, y)];
}


TERM_PUBLIC void
AQUA_vector(unsigned int x, unsigned int y)
{
  [thePath lineToPoint:NSMakePoint(x, y)];
}


TERM_PUBLIC void
AQUA_linetype(int linetype)
{
  [gnuTermAccess flushOrphanedGraphicsRender:NO release:NO];
  currentLinetype = linetype;   
}

TERM_PUBLIC void
AQUA_put_text(unsigned int x, unsigned int y, const char *str)
{
  if (!strlen(str))
    return;
  NS_DURING
		[[gnuTermAccess server] addString:[NSString stringWithCString:str] 
                                  atPoint:NSMakePoint(x, y)
                        withJustification:currentJustificationMode
                                  atAngle:currentAngle
                         withIndexedColor:currentLinetype];    
	NS_HANDLER
		if ([[localException name] isEqualToString:@"NSInvalidSendPortException"]) 
			[gnuTermAccess invalidateServer];
		else
			[localException raise];
	NS_ENDHANDLER
}

TERM_PUBLIC int 
AQUA_justify_text (enum JUSTIFY mode)
{
  currentJustificationMode = mode;
  return (TRUE);
}

TERM_PUBLIC int
AQUA_text_angle (int angle)
{
  if (angle==0)
  {
 		currentAngle = 0.0;      
  }
  else
  {
    currentAngle = 90.0;   
  }
  return (TRUE);
}


TERM_PUBLIC int 
AQUA_set_font(const char *font) /* "font,size" */
{
  NS_DURING
  	[[gnuTermAccess server] setFontWithName:@"Times-Roman" size:16.0];
  NS_HANDLER
    if ([[localException name] isEqualToString:@"NSInvalidSendPortException"]) 
      [gnuTermAccess invalidateServer];
    else
      [localException raise];
  NS_ENDHANDLER
  
  return (TRUE);
}

TERM_PUBLIC void 
AQUA_set_pointsize(double size) /* notification of set pointsize */
{
  LOG(@"    AQUA_set_pointsize(%f)",size);
}

TERM_PUBLIC void 
AQUA_suspend(void)  /* after one plot of multiplot */
{
  LOG(@"    AQUA_suspend");
    [gnuTermAccess flushOrphanedGraphicsRender:YES release:NO];
}
 
TERM_PUBLIC void 
AQUA_resume(void) /* before subsequent plot of multiplot */
{
  LOG(@"    AQUA_resume");
}
TERM_PUBLIC void 
AQUA_boxfill(int style, unsigned int x1, unsigned int y1, unsigned int width, unsigned int height) /* clear part of multiplot */
{
  NSLog(@"AQUA_boxfill");
  [gnuTermAccess flushOrphanedGraphicsRender:NO release:NO];
  //
  // FIXME: quick & dirty fix, should add -(void)clearRect:(NSRect)bounds to AQT methods
  //
  NS_DURING
    // [[gnuTermAccess server] addPolygon:[NSBezierPath bezierPathWithRect:NSMakeRect(x1,y1,width,height)] withIndexedColor:style];
    [[gnuTermAccess server] clearRect:NSMakeRect(x1,y1,width,height)];
    [[gnuTermAccess server] renderInViewShouldRelease:NO];
  NS_HANDLER
    if ([[localException name] isEqualToString:@"NSInvalidSendPortException"]) 
      [gnuTermAccess invalidateServer];
    else
      [localException raise];
  NS_ENDHANDLER
}
  
TERM_PUBLIC void 
AQUA_linewidth(double linewidth)
{
  LOG(@"    AQUA_linewidth(%f)",linewidth);
  [thePath setLineWidth:linewidth];
}

TERM_PUBLIC void 
AQUA_pointsize(double pointsize)
{
  LOG(@"    AQUA_pointsize(%f)",pointsize);
}

#ifdef PM3D
  TERM_PUBLIC int 
  AQUA_make_palette(t_sm_palette *palette)
  {
    return(0); /* We handle the palette in the server */
  }

  TERM_PUBLIC void 
  AQUA_set_color(double gray)
  {
        
    LOG(@"[pm3d] AQUA_set_color(%f)", gray);
    [gnuTermAccess flushOrphanedGraphicsRender:NO release:NO];
    currentGray = gray;
  }

  TERM_PUBLIC void 
  AQUA_filled_polygon(int points, gpiPoint *corners)
  {
    int i;
		NS_DURING    
			[thePath moveToPoint:NSMakePoint(corners[0].x, corners[0].y)];
			for (i=1;i<points;i++)
			{
				 [thePath lineToPoint:NSMakePoint(corners[i].x, corners[i].y)];
			}
			[thePath closePath];
			[[gnuTermAccess server] addPolygon:thePath withColor:currentGray];
			[thePath removeAllPoints];                   
		NS_HANDLER
			if ([[localException name] isEqualToString:@"NSInvalidSendPortException"]) 
				[gnuTermAccess invalidateServer];
			else
				[localException raise];
		NS_ENDHANDLER
  }
#endif


#endif /* TERM_BODY */

#ifdef TERM_TABLE


TERM_TABLE_START(aqua_driver)
  "aqua",
  "Interface to graphics terminal server for Mac OS X",
  AQUA_XMAX, AQUA_YMAX, AQUA_VCHAR, AQUA_HCHAR, AQUA_VTIC, AQUA_HTIC, 
  AQUA_options, AQUA_init, AQUA_reset,
  AQUA_text, null_scale, AQUA_graphics, AQUA_move, AQUA_vector,
  AQUA_linetype, AQUA_put_text, 
  /* optionals */
  AQUA_text_angle,
  AQUA_justify_text, do_point, do_arrow, AQUA_set_font,
  AQUA_pointsize, TERM_CAN_MULTIPLOT,
  AQUA_suspend, AQUA_resume,
  AQUA_boxfill, AQUA_linewidth
#ifdef USE_MOUSE
  , 0, 0, 0, 0, 0
#endif
#ifdef PM3D
  , AQUA_make_palette,
  0 /* AQUA_previous_palette */,
  AQUA_set_color,
  AQUA_filled_polygon
#endif
TERM_TABLE_END(aqua_driver)

#undef LAST_TERM
#define LAST_TERM aqua_driver

#endif /* TERM_TABLE */
#endif /* TERM_PROTO_ONLY */



#ifdef TERM_HELP
START_HELP(aqua)
"1 aqua",
"?commands set terminal aqua",
"?set terminal aqua",
"?set term aqua",
"?terminal aqua",
"?term aqua",
"?aqua",
"?Aqua",
" Syntax:",
"   set terminal aqua {<n>}",
"",
" where <n> is the number of the window to display the plot in.",
" Default window number is 0."
END_HELP(aqua)
#endif /* TERM_HELP */


